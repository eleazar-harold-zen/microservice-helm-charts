global:
  chartName: fastapi
fastapi:
  # Deployment object
  deployment:
    enabled: false
  # Updated (New) Deployment resource
  newDeployment:
    enabled: true
    name: fastapi
    namespace: python
    replicas: 1
    appName: fastapi
    role: api
    containerName: fastapi-container
    imageRepository: eleazarharold/fastapi-python
    imageTag: "v5"
    port: 8000
  # Horizontal Pod Autoscaler
  hpa:
    enabled: false
  # Service Account object
  serviceAccount:
    enabled: true
    name: fastapi
    namespace: python
  # Stable Service object
  service:
    enabled: true
    name: fastapi
    namespace: python
    appName: fastapi
    type: ClusterIP
    servicePort: 8000
    targetPort: 8000
  # Canary Service object (for Argo Rollouts)
  canaryService:
    enabled: false
  # Namespace object
  namespace:
    enabled: true
    name: python
  # Ingress
  ingress:
    enabled: false
  # Canary Rollout # Canary Service object (for Argo Rollouts)
  canaryRollout:
    enabled: false
  # Virtual Service
  virtualService:
    enabled: true
    name: fastapi
    namespace: python
    destination:
      host: fastapi-service
      port: 8000
  # Peer Authentication
  peerAuthentication:
    enabled: true
    name: fastapi
    namespace: python
    app: fastapi
    mtls:
      mode: STRICT
  # Authorization Policy
  authorizationPolicy:
  # get authorization policy attributes from platform/istio/authorization-policy.yaml
    enabled: true
    name: fastapi-authorization-policy
    namespace: python
    app: fastapi
    action: ALLOW
    rules:
      - from:
          - namespaces:
              - express
        to:
          - methods:
              - GET
              - POST
  # Service Entry
  serviceEntry:
    enabled: false
  # Envoy Filter
  envoyFilter:
    enabled: true
    name: fastapi
    namespace: python
    workloadSelector:
      labels:
        app: fastapi
    configPatches:
    - applyTo: "HTTP_FILTER"
      match:
        context: "SIDECAR_INBOUND"
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: "INSERT_BEFORE"
        value:
          name: "envoy.lua"
          typed_config: |
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                request_handle:headers():add("x-request-id", request_handle:headers():get("x-request-id"))
              end
              function envoy_on_response(response_handle)
                response_handle:headers():add("x-envoy-attempt-count", response_handle:headers():get("x-envoy-attempt-count"))
                response_handle:headers():add("x-envoy-decorator-operation", response_handle:headers():get("x-envoy-decorator-operation"))
              end
