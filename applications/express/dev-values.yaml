global:
  chartName: express
  namespace: express
express:
  # Deployment object
  deployment:
    enabled: true
    replicas: 1
    appName: express
    role: api
    containerName: nodejs-app
    imageRepository: eleazarharold/express-node
    imageTag: "v5"
    port: 3000
  # Updated (New) Deployment resource
  newDeployment:
    enabled: false
  # Canary Service object
  canaryService:
    enabled: false
  # Service object
  service:
    enabled: true
    appName: express
    type: LoadBalancer
    servicePort: 3000
    targetPort: 3000
  # Service Account object
  serviceAccount:
    enabled: true
  # Namespace object
  namespace:
    enabled: true
  # Ingress object
  ingress:
    enabled: false
  # Horizontal Pod Autoscaler
  hpa:
    enabled: false
  # Canary Rollout
  canaryRollout:
    enabled: false
  # Virtual Service
  virtualService:
    enabled: true
    destination:
      port: 3000
  # Peer Authentication
  peerAuthentication:
    enabled: true
    app: express
    mtls:
      mode: STRICT
  # Authorization Policy
  authorizationPolicy:
    enabled: true
    app: express
    action: ALLOW
    rules:
      - from:
        - namespaces:
          - python
        to:
        - methods:
          - GET
          - POST
  # Request Authentication
  requestAuthentication:
    enabled: false
  # Service Entry
  serviceEntry:
    enabled: false
  # Envoy Filter
  envoyFilter:
    enabled: true
    workloadSelector:
      labels:
        app: express
    configPatches:
    - applyTo: "HTTP_FILTER"
      match:
        context: "SIDECAR_INBOUND"
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: "INSERT_BEFORE"
        value:
          name: "envoy.lua"
          typed_config: |
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                local service = headers:get(":authority")
                local namespace = headers:get("x-istio-namespace")
                if namespace == "python" and service == "fastapi-service" then
                  headers:add("x-call-service", service .. "." .. namespace .. ".svc.cluster.local")
                  request_handle:logInfo("fastapi-service called nodejs-service successfully")
                else
                  request_handle:logWarn("Service and/or Namespace are incorrect")
                end
              end
